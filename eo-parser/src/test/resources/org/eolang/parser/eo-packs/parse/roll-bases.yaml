# The MIT License (MIT)
#
# Copyright (c) 2016-2025 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
---
sheets:
  - /org/eolang/parser/parse/move-voids-up.xsl
  - /org/eolang/parser/parse/validate-before-stars.xsl
  - /org/eolang/parser/parse/resolve-before-stars.xsl
  - /org/eolang/parser/parse/wrap-method-calls.xsl
  - /org/eolang/parser/parse/const-to-dataized.xsl
  - /org/eolang/parser/parse/stars-to-tuples.xsl
  - /org/eolang/parser/parse/vars-float-up.xsl
  - /org/eolang/parser/parse/build-fqns.xsl
  - /org/eolang/parser/parse/expand-qqs.xsl
  - /org/eolang/parser/parse/expand-aliases.xsl
  - /org/eolang/parser/parse/resolve-aliases.xsl
  - /org/eolang/parser/parse/add-default-package.xsl
  - /org/eolang/parser/parse/explicit-data.xsl
  - /org/eolang/parser/parse/roll-bases.xsl
asserts:
  - /program/objects[count(o)=3]
  - //o[@base='$.two.a' and @name='one']
  - //o[@base='$.three.b' and @name='two']
  - //o[@base='Q.org.eolang.c' and @name='three']
  - //o[@base='.with']/o[@base='Q.org.eolang.tuple.empty.with' and o[@base='Q.org.eolang.number']]
  - //o[@base='Q.org.eolang.true.if' and count(o)=2]
  - //o[@base='.if' and count(o)=3]/o[1][@base='$.x']/o[1][@base='Q.org.eolang.y']
  - //o[@base='.and']/o[1][@base='.eq']/o[1][@base='.as-bytes']/o[@base='Q.org.eolang.bytes' and text()!='']
  - //o[@base='.and']/o[1][@base='.eq']/o[2][@base='Q.org.eolang.true']
  - //o[@base='.and']/o[2][@base='.eq']/o[1][@base='.as-bytes']/o[@base='Q.org.eolang.bytes' and text()!='']
  - //o[@base='.and']/o[2][@base='.eq']/o[2][@base='Q.org.eolang.false']
  - //o[@name='bts']/o[1][@base='.eq']/o[1][@base='.as-bytes']/o[1][@base='Q.org.eolang.bytes' and text()!='']
input: |
  # No comment.
  [x] > foo
    a. > one
      b. > two
        c > three
    * 1 2 > tup
    if. true 1 2 > cond
    if. > rev
      x
        y
      2
      1

  # This unit test is supposed to check the functionality of the corresponding object.
  [] > compares-bool-to-bytes-reverse
    and. > @
      01-.as-bytes.eq true
      00-.as-bytes.eq false

  # No comments.
  [] > bts
    eq. > @
      as-bytes.
        bytes.
          eolang.
            org.
              Q
          01-
